{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianvecchio/Documents/alkemi-front/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router\";\nimport bcrypt from \"bcryptjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\",\n    comfirmedPassword: \"\"\n  });\n  const [resgistered, setRegistered] = useState(false);\n  useEffect(() => {\n    axios.get(\"http://localhost:7000/users\").then(res => {\n      setUsers(res.data);\n    }).catch(error => alert(error));\n  }, []);\n\n  const handleChange = evt => {\n    const name = evt.target.name;\n    const value = evt.target.type === \"checkbox\" ? evt.target.checked : evt.target.value;\n    setUser({ ...user,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    if (users === \"Not result\") {\n      if (user.password === user.comfirmedPassword) {\n        var salt = bcrypt.genSaltSync(10);\n        var hash = bcrypt.hashSync(user.password, salt);\n        axios({\n          method: \"post\",\n          url: \"http://localhost:7000/users/add\",\n          data: {\n            username: user.username,\n            password: hash\n          }\n        }).then(res => {\n          if (res.status === 200) {\n            console.log(res.status);\n            setRegistered(true);\n          }\n        }).catch(error => console.log(error));\n      }\n    }\n\n    if (users.find(data => user.username === data.username)) {\n      alert(\"User already exists\");\n    } else {\n      if (user.password === user.comfirmedPassword) {\n        var salt = bcrypt.genSaltSync(10);\n        var hash = bcrypt.hashSync(user.password, salt);\n        axios({\n          method: \"post\",\n          url: \"http://localhost:7000/users/add\",\n          data: {\n            username: user.username,\n            password: hash\n          }\n        }).then(res => {\n          if (res.status === 200) {\n            console.log(res.status);\n            setRegistered(true);\n          }\n        }).catch(error => console.log(error));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loginContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), !resgistered ? /*#__PURE__*/_jsxDEV(Form, {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"username\",\n          name: \"username\",\n          id: \"exampleUsername\",\n          placeholder: \"username\",\n          required: true,\n          value: user.username,\n          onChange: e => {\n            handleChange(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"examplePassword\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"password\",\n          name: \"password\",\n          id: \"examplePassword\",\n          placeholder: \"********\",\n          required: true,\n          value: user.password,\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"examplePassword\",\n          children: \"Comfirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"password\",\n          name: \"comfirmedPassword\",\n          id: \"examplePassword\",\n          placeholder: \"********\",\n          required: true,\n          value: user.comfirmedPassword,\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"6Dms+8zmcPNMdrcUq04VhXNnDSM=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/sebastianvecchio/Documents/alkemi-front/src/components/Register.js"],"names":["React","useEffect","useState","Form","FormGroup","Label","Input","Button","axios","Redirect","bcrypt","Register","users","setUsers","user","setUser","username","password","comfirmedPassword","resgistered","setRegistered","get","then","res","data","catch","error","alert","handleChange","evt","name","target","value","type","checked","handleSubmit","e","salt","genSaltSync","hash","hashSync","method","url","status","console","log","find"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router\";\nimport bcrypt from \"bcryptjs\";\n\nconst Register = () => {\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\",\n    comfirmedPassword: \"\",\n  });\n  const [resgistered, setRegistered] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:7000/users\")\n      .then((res) => {\n        setUsers(res.data);\n      })\n      .catch((error) => alert(error));\n  }, []);\n\n  const handleChange = (evt) => {\n    const name = evt.target.name;\n    const value =\n      evt.target.type === \"checkbox\" ? evt.target.checked : evt.target.value;\n    setUser({\n      ...user,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    if (users === \"Not result\") {\n      if (user.password === user.comfirmedPassword) {\n        var salt = bcrypt.genSaltSync(10);\n        var hash = bcrypt.hashSync(user.password, salt);\n        axios({\n          method: \"post\",\n          url: \"http://localhost:7000/users/add\",\n          data: {\n            username: user.username,\n            password: hash,\n          },\n        })\n          .then((res) => {\n            if (res.status === 200) {\n              console.log(res.status);\n              setRegistered(true);\n            }\n          })\n          .catch((error) => console.log(error));\n      }\n    }\n    if (users.find((data) => user.username === data.username)) {\n      alert(\"User already exists\");\n    } else {\n      if (user.password === user.comfirmedPassword) {\n        var salt = bcrypt.genSaltSync(10);\n        var hash = bcrypt.hashSync(user.password, salt);\n        axios({\n          method: \"post\",\n          url: \"http://localhost:7000/users/add\",\n          data: {\n            username: user.username,\n            password: hash,\n          },\n        })\n          .then((res) => {\n            if (res.status === 200) {\n              console.log(res.status);\n              setRegistered(true);\n            }\n          })\n          .catch((error) => console.log(error));\n      }\n    }\n  };\n\n  return (\n    <div className=\"loginContainer\">\n      <h2>Register</h2>\n      {!resgistered ? (\n        <Form className=\"form\">\n          <FormGroup>\n            <Label>Username</Label>\n            <Input\n              type=\"username\"\n              name=\"username\"\n              id=\"exampleUsername\"\n              placeholder=\"username\"\n              required\n              value={user.username}\n              onChange={(e) => {\n                handleChange(e);\n              }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"examplePassword\">Password</Label>\n            <Input\n              type=\"password\"\n              name=\"password\"\n              id=\"examplePassword\"\n              placeholder=\"********\"\n              required\n              value={user.password}\n              onChange={(e) => handleChange(e)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"examplePassword\">Comfirm Password</Label>\n            <Input\n              type=\"password\"\n              name=\"comfirmedPassword\"\n              id=\"examplePassword\"\n              placeholder=\"********\"\n              required\n              value={user.comfirmedPassword}\n              onChange={(e) => handleChange(e)}\n            />\n          </FormGroup>\n          <Button color=\"primary\" onClick={handleSubmit}>\n            Submit\n          </Button>\n        </Form>\n      ) : (\n        <Redirect to=\"/\" />\n      )}\n    </div>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}